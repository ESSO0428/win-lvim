{
    "New class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}(${2:object}):",
            "\t\"\"\"${3:docstring for $1.}\"\"\"",
            "\tdef __init__(self, ${4:arg}):",
            "\t\t${5:super($1, self).__init__()}",
            "\t${4/([^,=]+)(?:=[^,]+)?(,\\s*|)/\tself.$1 = $1${2:+\n\t}/g}",
            "\n\t$0"
        ],
        "description" : "Code snippet for a class definition."
    },
    "New dataclass": {
        "prefix": "classd",
        "body": [
            "from dataclasses import dataclass\n\n",
            "@dataclass",
            "class ${1:ClassName}(${2:object}):",
            "\t\"\"\"${3:Docstring for $1.}\"\"\"",
            "\t${4:property}: ${type}",
            "\t$0"
        ],
        "description": "Code snippet for a dataclass definition."
    },
    "New froperty": {
        "prefix": "property",
        "body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
        "description" : ""
    },
    "New enum": {
        "prefix": "enum",
        "body": [
            "from enum import Enum\n\n",
            "class ${1:MyEnum}(Enum):",
            "\t\"\"\"${2:Docstring for $1.}\"\"\"",
            "\t${3:FIRST_ENUM} = \"some_value\"",
            "\t${4:SECOND_ENUM} = \"some_other_value\"",
            "\t$0"
        ],
        "description": "Code snippet for enum definition."
    },
    "dowhile": {
        "prefix": "dowhile",
        "body": "do = True\nwhile do or ${2:condition}:\n\tdo = False\n\t${1:body}$0",
        "description" : "Code snippet to create a do-while loop structure."
    },
    "lambda": {
        "prefix": "lam",
        "body": "lambda ${1:args}: ${2:expr}",
        "description": "Create template for lambda function"
    }
}
